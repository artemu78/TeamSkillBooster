import React from "react";
import { useCourse } from "@/context/CourseContext";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";

const ReflectionSection: React.FC = () => {
  const { reflection, updateReflection, completeReflection } = useCourse();
  const { toast } = useToast();

  const handleUpdateReflection = (
    field: keyof typeof reflection,
    value: string
  ) => {
    updateReflection(field, value);
  };

  const handleDownloadPlan = () => {
    // Validate that all fields are filled out
    if (!reflection.commitment || !reflection.obstacles || !reflection.successMeasure) {
      toast({
        title: "Please complete all fields",
        description: "All reflection fields are required before downloading your plan",
        variant: "destructive",
      });
      return;
    }

    // Create content for download
    const content = `
# My Team Skills Action Plan

## My Commitment
${reflection.commitment}

## Potential Obstacles
${reflection.obstacles}

## How I'll Measure Success
${reflection.successMeasure}

Generated by TeamSkills Course - How to Be a Valuable Team Member
    `;

    // Create and download file
    const element = document.createElement("a");
    const file = new Blob([content], { type: "text/plain" });
    element.href = URL.createObjectURL(file);
    element.download = "my-team-skills-plan.md";
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);

    // Mark reflection as complete
    completeReflection();

    toast({
      title: "Action plan downloaded!",
      description: "Your reflection has been marked as complete",
    });
  };

  return (
    <section id="reflection" className="py-12 bg-gray-50">
      <div className="container mx-auto px-4">
        <div className="max-w-2xl mx-auto">
          <h2 className="text-2xl md:text-3xl font-bold text-center mb-6">
            Final Reflection
          </h2>
          <p className="text-center text-gray-600 mb-12">
            Solidify your learning by committing to specific actions you'll take to become a more valuable team member.
          </p>

          <Card className="bg-white rounded-xl shadow-sm">
            <CardContent className="p-6 md:p-8">
              <div className="mb-6">
                <Label
                  htmlFor="commitment"
                  className="block text-lg font-medium text-gray-700 mb-2"
                >
                  One thing I will start doing...
                </Label>
                <Textarea
                  id="commitment"
                  rows={4}
                  value={reflection.commitment}
                  onChange={(e) => handleUpdateReflection("commitment", e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition"
                  placeholder="Write your commitment here..."
                />
                <p className="text-sm text-gray-500 mt-2">
                  Be specific about what you'll do differently based on what you've learned.
                </p>
              </div>

              <div className="mb-6">
                <Label
                  htmlFor="obstacles"
                  className="block text-lg font-medium text-gray-700 mb-2"
                >
                  Potential obstacles I might face:
                </Label>
                <Textarea
                  id="obstacles"
                  rows={3}
                  value={reflection.obstacles}
                  onChange={(e) => handleUpdateReflection("obstacles", e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition"
                  placeholder="What might get in your way?"
                />
              </div>

              <div className="mb-8">
                <Label
                  htmlFor="success-measure"
                  className="block text-lg font-medium text-gray-700 mb-2"
                >
                  How I'll measure success:
                </Label>
                <Textarea
                  id="success-measure"
                  rows={3}
                  value={reflection.successMeasure}
                  onChange={(e) => handleUpdateReflection("successMeasure", e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition"
                  placeholder="How will you know you've succeeded?"
                />
              </div>

              <div className="text-center">
                <Button
                  onClick={handleDownloadPlan}
                  className="bg-primary text-white font-medium py-3 px-8 rounded-lg hover:bg-primary/90 transition"
                >
                  Finish & Download My Plan
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </section>
  );
};

export default ReflectionSection;
